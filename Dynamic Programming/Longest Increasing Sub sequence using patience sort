/*
https://www.hackerrank.com/challenges/longest-increasing-subsequent/problem




*/
import java.io.IOException;
import java.util.Scanner;

public class Solution {

    // Complete the longestIncreasingSubsequence function below.
    static int longestIncreasingSubsequence(int[] arr) {

        int[] subsequence = new int[arr.length + 1];
        int[] parent = new int[arr.length];
        int lenght = 0;

        for (int i = 1; i < arr.length; i++) {
            int low = 1, high = lenght;
            while (low <= high) {
                int mid = (int) Math.ceil((low + high) / 2);
                if (subsequence[mid] < arr[i]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }

            int pos = low;
            parent[i] = subsequence[pos - 1];
            subsequence[pos] = i;

            if (pos > lenght)
                lenght = pos;

        }
        return lenght-1;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        //BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            int arrItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            arr[i] = arrItem;
        }

        int result = longestIncreasingSubsequence(arr);
        System.out.println(result);
        // bufferedWriter.write(String.valueOf(result));
        // bufferedWriter.newLine();

        // bufferedWriter.close();

        scanner.close();
    }
}
