/*
https://www.hackerrank.com/challenges/longest-increasing-subsequent/problem




*/
package com.pCodeFix.solutions;

import java.io.IOException;
import java.util.Scanner;

public class Solution {

    static int CeilIndex(int A[], int l, int r, int key)
    {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (A[m] >= key)
                r = m;
            else
                l = m;
        }

        return r;
    }
    // Complete the longestIncreasingSubsequence function below.
    static int longestIncreasingSubsequence(int[] arr) {


        int size = arr.length;
        int[] tailTable = new int[size];
        int len; // always points empty slot

        tailTable[0] = arr[0];
        len = 1;
        for (int i = 1; i < size; i++) {
            if (arr[i] < tailTable[0])
                // new smallest value
                tailTable[0] = arr[i];

            else if (arr[i] > tailTable[len - 1])
                // A[i] wants to extend largest subsequence
                tailTable[len++] = arr[i];

            else
                // A[i] wants to be current end candidate of an existing
                // subsequence. It will replace ceil value in tailTable
                tailTable[CeilIndex(tailTable, -1, len - 1, arr[i])] = arr[i];
        }

        return len;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        //BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            int arrItem = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");
            arr[i] = arrItem;
        }

        int result = longestIncreasingSubsequence(arr);
        System.out.println(result);
        // bufferedWriter.write(String.valueOf(result));
        // bufferedWriter.newLine();

        // bufferedWriter.close();

        scanner.close();
    }
}
